#python interpreter
python_native.python_interpreter=python3

#pip interpreter
python_native.pip_command=pip3

#max time wait on lock project or lock venv
#if there is a lock on project(creating project) or there is a lock on venv (creating venv) a system wait for a max time; after that an exception is throw
#time in ms
python_native.max_time_wait_lock=5000

#max time wait on lock project or lock venv
#if there is a lock on project(creating project) or there is a lock on venv (creating venv) a system wait for a max time; after that an exception is throw
#time in ms
python_native.max_time_wait_lock=5000

#resolve the link used as venv path with link  userd in path 
python_native.resolve_link=true

python_native.tidy_script_server.host=$
python_native.tidy_script_server.port=1234
python_native.tidy_script_server.password=1qazxsw2
python_native.tidy_script_server.container_name_suffix=test

#%1% suffix add to name of container
#%2% absolute path of tidy installation
python_native.tidy_script_server.docker_start=docker run -dit --cap-add=SYS_ADMIN --name tidy_temp_python_%1% --rm -v %2%/basvi/script:/tidyHome/basvi/script itchange/python_machine:latest bash -c /startNormal.sh


#mount point of path script inside docker container
python_native.docker_mount_root=tidyHome

#name of image docker to use
python_native.docker_image=itchange/python_machine:latest

#if true the script start in chroot jail and can access only project dir
python_native.chroot=true

#script to create venv
#%1% python interpreter
#%2% name virtual environment
python_native.create_venv=\
	import os;\n\
	os.system('%1% -m venv %2%'); \n\

#script for install or upgrade python adapter
python_native.name_python_adapter=py-tidy-adapter

#script for install or upgrade python adapter
#%1% pip command
#%2% package to install
python_native.install_package=\
	import os;\n\
	os.system('%1% install --upgrade %2%'); \

#execute file for windows system 
# %1 venv
# %2 nameScript
# %3 moveto
# %* params of script
# !1! nome dell'interprete definito in  python_native.python_interpreter
python_native.execute.bat=\n\
	@echo off  \n\
              \n\
	set venvPath=%1\n\
	shift  \n\
	set script=%1\n\
              \n\
	shift  \n\
	set moveto=%1\n\
              \n\
	set params=\n\
                \n\
	:loop     \n\
	shift    \n\
	if [%1]==[] goto afterloop \n\
	set params=%params% %1\n\
	goto loop  \n\
	:afterloop \n\
	           \n\
    if %venvPath% == - ( \n\
	  cd %moveto%  \n\
	  !1! %script% %params% \n\
	) else ( \n\
	   cd %moveto%  \n\
	   %venvPath%\\Scripts\\activate   \n\
	   !1! %script% %params% \n\
	)\n\
	
	
python_native.execute.sh=\n\
	#!/bin/bash\n\
	\n\
	#path where tidy project and venv are mounted (usually tidyHome)\n\
	tidyHome=$1\n\
        shift\n\
        #path of venv relative to project home , - if no venv have to be used\n\
	venvPath=$1\n\
        shift\n\
        #path of venv relative to tidy home , - if no venv have to be used\n\
	absolutePathVenv=$1\n\
	shift\n\
	#name of the script  to be executed\n\
	script=$1\n\
	shift\n\
	#path of directory  to move in (relative to project home) before execute script. If chroot != '-' must be a directory name (not path) that contains script (usually code )\n\
	moveto=$1\n\
	shift\n\
	#if != '-' the script is executed in chroot jail, chroot variable contains the name of dir used as jail\n\
	chroot=$1\n\
	shift\n\
	#list of parameters pass to script\n\
	params=$*\n\
	\n\
	\n\
	CMD=$(cat <<-END\n\
	   if [ $venvPath  ==  '-' ];\n\
	   then\n\
	     cd $moveto\n\
	     python3 ./$script $params\n\
	   else\n\
	     if [ $chroot != '-' ]\n\
	     then\n\
                echo nameserver 8.8.4.4 >> /etc/resolv.conf \n\
	        source $tidyHome/$absolutePathVenv/bin/activate\n\
	     else\n\
	        source $venvPath/bin/activate\n\
	     fi\n\
	     cd $moveto\n\
	     python3 ./$script $params\n\
	   fi\n\
	END\n\
	)\n\
	\n\
	if [ $chroot != '-' ]\n\
	  then\n\
	\n\
	    unshare --mount bash -c "\n\
		\n\
		    mkdir -p $chroot/bin $chroot/lib $chroot/lib64 $chroot/etc $chroot/usr $chroot/dev $chroot/$tidyHome/$absolutePathVenv $chroot/code\n\
		\n\
		    mount --bind -r /bin $chroot/bin\n\
		    mount --bind -r /lib $chroot/lib\n\
		    mount --bind -r /lib64 $chroot/lib64\n\
		    mount --bind  /etc $chroot/etc\n\
		    mount --bind -r /usr $chroot/usr\n\
		    mount --bind -r /dev $chroot/dev\n\
		    mount --bind  $venvPath $chroot/$tidyHome/$absolutePathVenv\n\
		    mount --bind code $chroot/code\n\
		\n\
		    chroot $chroot bash -c '$CMD'\n\
		\n\
		    umount $chroot/bin\n\
		    umount $chroot/lib\n\
		    umount $chroot/lib64\n\
		    umount $chroot/etc\n\
		    umount $chroot/usr\n\
		    umount $chroot/dev\n\
		    umount $chroot/$tidyHome/$absolutePathVenv\n\
		    umount $chroot/code\n\
	   "\n\
	 else\n\
	    bash -c "$CMD"\n\
	 fi\n\
	\n\
