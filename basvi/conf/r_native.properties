r_native.interpreter_name=Rscript

#script to create renv
r_native.create_venv=require('renv');renv::init();

#max time wait on lock project or lock venv
#if there is a lock on project(creating project) or there is a lock on venv (creating venv) a system wait for a max time; after that an exception is throw
#time in ms
r_native.max_time_wait_lock=5000

#resolve the link used as venv path with link  userd in path 
r_native.resolve_link=true

#mount point of path script inside docker container
r_native.docker_mount_root=tidyHome

#ip of docker container , if use 'get' the ip is retrieved from container named tidy_r_%r_native.tidy_script_server.container_name_suffix% (if container is not started one try is done with command %r_native.tidy_script_server.docker_start%)
r_native.tidy_script_server.host=$
r_native.tidy_script_server.port=1234
r_native.tidy_script_server.password=1qazxsw2
r_native.tidy_script_server.container_name_suffix=test

#%1% suffix add to name of container
#%2% absolute path of tidy installation
r_native.tidy_script_server.docker_start=docker run -dit --cap-add=SYS_ADMIN --name tidy_temp_r_%1% --rm -v %2%/basvi/script:/tidyHome/basvi/script itchange/r_machine:latest bash -c /startNormal.sh

#mount point of path script inside docker container
r_native.docker_mount_root=tidyHome

#name of image docker to use
r_native.docker_image=itchange/r_machine:latest


#if true the script start in chroot jail and can access only project dir
r_native.chroot=true


#script to use for install r adapter
r_native.install_adapter=\n\
        require('renv');\n\
        install.packages('import');\n\
        install.packages('httr');\n\
        install.packages('xml2');\n\
        install.packages('knitr');\n\
        install.packages('rmarkdown');\n\
        system('R CMD INSTALL %1%')\n\
        renv::snapshot();\n         
    
#execute file for windows system 
# %1 venv
# %2 nameScript
# %3 moveto
# %* params of script
# !1! nome dell'interprete definito in  r_native.r_interpreter
r_native.execute.bat=\n\
        @echo off  \n\
              \n\
        set venvPath=%1\n\
        shift  \n\
        set script=%1\n\
        shift         \n\
        set moveto=%1\n\
              \n\
        set params=\n\
                \n\
        :loop     \n\
        shift    \n\
        if [%1]==[] goto afterloop \n\
        set params=%params% %1\n\
        goto loop  \n\
        :afterloop \n\
                   \n\
    if %venvPath% == - ( \n\
	   cd %moveto%  \n\
	   !1! %script% %params%  \n\
	) else (  \n\
	   cd %moveto% \n\
	   !1! -e "renv::activate('%venvPath%');commandArgs <- function(...) strsplit(trimws('%params%'),' ')[[1]]; source('%script%',local=TRUE)"  \n\
	) \n\


r_native.execute.sh=\n\
	#!/bin/bash\n\
	\n\
	#path where tidy project and venv are mounted (usually tidyHome)\n\
	tidyHome=$1\n\
	shift\n\
    #path of venv relative to project home , - if no venv have to be used\n\
	venvPath=$1\n\
	shift\n\
    #path of venv relative to tidy home , - if no venv have to be used\n\
	absolutePathVenv=$1\n\
	shift\n\
	#name of the script  to be executed\n\
	script=$1\n\
	shift\n\
	#path of directory  to move in (relative to project home) before execute script. If chroot != '-' must be a directory name (not path) that contains script (usually code )\n\
	moveto=$1\n\
	shift\n\
	#if != '-' the script is executed in chroot jail, chroot variable contains the name of dir used as jail\n\
	chroot=$1\n\
	shift\n\
	#list of parameters pass to script\n\
	params=$*\n\
	\n\
	\n\
	CMD=$(cat <<-END\n\
           echo nameserver 8.8.4.4 >> /etc/resolv.conf \n\
	   if [ $venvPath  ==  '-' ];\n\
	   then\n\
	     cd $moveto\n\
		 Rscript $script $params \n\
	   else\n\
	        cd $moveto\n\
	        Rscript -e \\"require('renv');renv::activate('/$tidyHome/$absolutePathVenv');commandArgs <- function(...) strsplit(trimws('$params'),' ')[[1]]; source('$script',local=TRUE)\\" \n\
	   fi\n\
	END\n\
	)\n\
	\n\
	CMD1=$(cat <<-END\n\
	   if [ $venvPath  ==  '-' ];\n\
	   then\n\
	     cd $moveto\n\
		 Rscript $script $params \n\
	   else\n\
	        cd $moveto\n\
	        Rscript -e "require('renv');renv::activate('/$tidyHome/$absolutePathVenv');commandArgs <- function(...) strsplit(trimws('$params'),' ')[[1]]; source('$script',local=TRUE)" \n\
	   fi\n\
	END\n\
	)\n\
	\n\
	if [ $chroot != '-' ]\n\
	  then\n\
	\n\
	    unshare --mount bash -c "\n\
		\n\
		    mkdir -p $chroot/bin $chroot/lib $chroot/lib64 $chroot/etc $chroot/usr $chroot/tmp $chroot/root/.local $chroot/dev $chroot/$tidyHome/$absolutePathVenv $chroot/code\n\
		\n\
		    mount --bind -r /bin $chroot/bin\n\
		    mount --bind -r /lib $chroot/lib\n\
		    mount --bind -r /lib64 $chroot/lib64\n\
		    mount --bind  /etc $chroot/etc\n\
		    mount --bind -r /usr $chroot/usr\n\
		    mount --bind -r /dev $chroot/dev\n\
			mount --bind  /tmp $chroot/tmp\n\
			mount --bind  /root/.local $chroot/root/.local\n\
		    mount --bind  $venvPath $chroot/$tidyHome/$absolutePathVenv\n\
		    mount --bind code $chroot/code\n\
		\n\
		    chroot $chroot bash -c \\"$CMD\\"\n\
		\n\
		    umount $chroot/bin\n\
		    umount $chroot/lib\n\
		    umount $chroot/lib64\n\
		    umount $chroot/etc\n\
		    umount $chroot/usr\n\
		    umount $chroot/dev\n\
			umount $chroot/tmp\n\
			umount $chroot/root/.local\n\
		    umount $chroot/$tidyHome/$absolutePathVenv\n\
		    umount $chroot/code\n\
	   "\n\
	 else\n\
	    bash -c "$CMD1"\n\
	 fi\n\
	\n\

r_native.script_consent=\n\
    !1! -e "renv::consent(TRUE);"




